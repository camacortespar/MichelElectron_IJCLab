##include "services_dune.fcl"
##include "services_vdcoldbox.fcl"
#include "singles_dune.fcl"
#include "services_protodunevd.fcl"

process_name: SinglesGen

services:
{
  #Load the service that manages root files for histograms.
  TFileService: { fileName: "single_hist.root" }
  TimeTracker:           {}
  MemoryTracker:         {} #default is one
  RandomNumberGenerator: {} #ART native random number generator
  FileCatalogMetadata:  @local::art_file_catalog_mc
  			                @table::protodunevd_minimal_simulation_services
           	           #@table::vdcb_sim_base_services
}

#Start each new event with an empty event.

source:
{
  module_type: EmptyEvent
  timestampPlugin: { plugin_type: "GeneratedEventTimestamp" }
  maxEvents:   1000           #number of events to create
  firstRun:    1              #run number to use for this file
  firstEvent:  1              #number of first event in the file
}

#Define and configure some modules to do work on each event.
#First modules are defined; they are scheduled later.
#Modules are grouped by type.

physics:
{
 producers:
 {
   generator: @local::microboone_singlep
   rns:       { module_type: "RandomNumberSaver" }
 }

 #Define the producer and filter modules for this path, order matters, 
 #filters reject all following items. See lines starting physics.producers below
 simulate: [ rns, generator ]

 #Define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #Trigger_paths is a keyword and contains the paths that modify the art::event, 
 #i.e filters and producers
 trigger_paths: [simulate] 

 #End_paths is a keyword and contains the paths that do not modify the art::Event, 
 #i.e analyzers and output streams. These all run simultaneously
 end_paths:     [stream1]  
}

#Block to define where the output goes. If you defined a filter in the physics block
#and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)

outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "1muon.root"
   dataTier:    "generated"
   compressionLevel: 1
 }
}

#Change incoming particle properties

#Muons
physics.producers.generator.PDG: [ -13 ]			        
physics.producers.generator.PosDist: 1			        #type of distribution (0 = uniform, 1 = gaussian)
physics.producers.generator.X0: [ -200.0 ]
physics.producers.generator.Y0: [ -200.0 ]
physics.producers.generator.Z0: [ 299.5 ] 
physics.producers.generator.T0: [ 0.0 ]
physics.producers.generator.SigmaX: [ 0.0 ]      
physics.producers.generator.SigmaY: [ 0.0 ]      
physics.producers.generator.SigmaZ: [ 0.0 ]      
physics.producers.generator.SigmaT: [ 0.0 ]        
physics.producers.generator.PDist: 1               
physics.producers.generator.P0: [ 0.5 ]
physics.producers.generator.SigmaP: [ 0.25 ]
physics.producers.generator.AngleDist: 1       
physics.producers.generator.Theta0XZ: [ -170.12 ]
physics.producers.generator.Theta0YZ: [ 45.40 ] 
physics.producers.generator.SigmaThetaXZ: [ 0.0 ] 
physics.producers.generator.SigmaThetaYZ: [ 0.0 ]

#Electrons
#physics.producers.generator.PDG: [ 11 ]			        
#physics.producers.generator.X0: [ 80.0 ]
#physics.producers.generator.Y0: [ -80.0 ]
#physics.producers.generator.Z0: [ 240.0 ]              
#physics.producers.generator.P0: [ 0.035 ]
#physics.producers.generator.SigmaP: [ 0.020 ]




